---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import ThemeToggle from "../components/vue/ThemeToggle.vue";

interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;
const base = import.meta.env.BASE_URL.replace(/\/$/, '')
---

<!doctype html>
<html lang="en" class="h-full antialiased">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content={description} />
    <link rel="icon" type="image/svg+xml" href={`${base}/favicon.svg`} />
    <title>{title}</title>

    <!-- Preconnect to Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Primary font subset preload - Only preload what's immediately needed -->
    <link
      rel="preload"
      as="style"
      href="https://fonts.googleapis.com/css2?family=Anonymous+Pro:wght@400&family=Inter:wght@400;600&display=swap"
    />

    <!-- Primary font loading -->
    <!-- @ts-expect-error - media is read by onload -->
    <link 
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Anonymous+Pro:wght@400&family=Inter:wght@400;600&display=swap"
      media="print"
      onload="this.media='all'"
    />
    
    <!-- @ts-expect-error - media is read by onload -->
    <link 
      rel="stylesheet" 
      href="https://fonts.googleapis.com/css2?family=Anonymous+Pro:ital,wght@0,700;1,400;1,700&family=Inter:wght@100;200;300;500;700;800;900&display=swap"
      media="print"
      onload="this.media='all'"
    />

    <!-- Minimal theme initialization to prevent FOUC -->
    <script is:inline define:vars={{ defaultTheme: 'dark' }}>
      (function() {
        function getThemePreference() {
          if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
          }
          return defaultTheme;
        }

        const theme = getThemePreference();
        document.documentElement.classList.toggle('dark', theme === 'dark');

        if (typeof window !== 'undefined') {
          window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
            if (!localStorage.getItem('theme')) {
              document.documentElement.classList.toggle('dark', e.matches);
            }
          });
        }
      })();
    </script>

    <!-- Critical CSS -->
    <style is:inline>
      :root {
        color-scheme: light dark;
        --font-primary: 'Anonymous Pro', ui-monospace, monospace;
        --font-heading: 'Inter', system-ui, sans-serif;
        font-synthesis: none;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        font-family: var(--font-primary);
        font-size: 0.813rem;
      }

      h1, h2, h3, h4, h5, h6 {
        font-family: var(--font-heading);
      }

      /* Ensure smooth theme transitions */
      html.transitioning * {
        transition: background-color 200ms ease-in-out, color 200ms ease-in-out;
      }

      /* Font fallback to prevent layout shift */
      .font-sans {
        font-family: var(--font-heading);
      }
      .font-mono {
        font-family: var(--font-primary);
      }
    </style>
  </head>
  <body class="h-full bg-white dark:bg-gray-900 transition-colors duration-300">
    <div class="flex min-h-full flex-col">
      <Header />
      <main class="flex-1">
        <slot />
      </main>
      <Footer />
    </div>
    <ThemeToggle client:load />
  </body>
</html>