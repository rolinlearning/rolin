---
import type { CollectionEntry } from "astro:content";
import { formatDate } from "../../utils/date";
import { Mic, Clock, ArrowRight, Play, Pause } from "lucide-astro";

interface Props {
  podcast: CollectionEntry<"podcast">;
}

const { podcast } = Astro.props;
---
<article
  class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden 
         transition-all duration-300 hover:shadow-xl group
         border-2 border-transparent hover:border-blue-500 dark:hover:border-blue-400"
>
  <div class="p-6">
    <div class="flex items-center gap-2 mb-4">
      <div class="bg-blue-100 dark:bg-blue-900 p-2 rounded-full">
        <Mic size={20} class="text-blue-600 dark:text-blue-400" />
      </div>
      {
        podcast.data.episodeNumber && (
          <span class="text-sm font-medium text-blue-600 dark:text-blue-400">
            Episodio {podcast.data.episodeNumber}
          </span>
        )
      }
    </div>

    <h2
      class="text-xl font-bold text-gray-900 dark:text-white mb-2 
             group-hover:text-blue-600 dark:group-hover:text-blue-400
             transition-colors duration-300"
    >
      <a href={`/podcast/${podcast.slug}`}>
        {podcast.data.title}
      </a>
    </h2>

    <div class="flex items-center gap-3 text-sm text-gray-500 mb-3">
      <time datetime={podcast.data.pubDate.toISOString()}>
        {formatDate(podcast.data.pubDate)}
      </time>
      {
        podcast.data.duration && (
          <>
            <span class="w-1 h-1 rounded-full bg-gray-400" />
            <span class="flex items-center gap-1">
              <Clock size={16} class="text-gray-500" />
              {podcast.data.duration}
            </span>
          </>
        )
      }
    </div>

    <p class="text-gray-600 dark:text-gray-300 line-clamp-3 mb-4">
      {podcast.data.description}
    </p>

    <div class="flex flex-wrap gap-2 mb-4">
      {
        podcast.data.tags.map((tag) => (
          <span class="px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 
                       text-gray-700 dark:text-gray-300 rounded-full">
            {tag}
          </span>
        ))
      }
    </div>

    <div class="mt-4 border-t pt-4 dark:border-gray-700">
      <div class="flex items-center gap-3">
        <button
          class="play-button flex items-center justify-center w-12 h-12
                 bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600
                 text-white rounded-full transition-colors duration-300"
          data-audio-url={podcast.data.audioUrl}
          aria-label="Play episode"
          >
          <span class="play-icon block">
            <Play size={24} class="text-white" />
          </span>
          <span class="pause-icon hidden">
            <Pause size={24} class="text-white" />
          </span>
        </button>
        <div class="flex-1">
          <audio class="w-full h-8 audio-preview" controls preload="none">
            <source src={podcast.data.audioUrl} type="audio/mpeg" />
            Tu navegador no soporta el elemento de audio.
          </audio>
        </div>
      </div>
      <a
        href={`/podcast/${podcast.slug}`}
        class="mt-3 text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400
               dark:hover:text-blue-300 inline-flex items-center gap-1"
      >
        Ver episodio completo
        <ArrowRight size={16} />
      </a>
    </div>
  </div>
</article>

<script>
  function initializeAudioPlayers() {
    console.log("Hello, I'm in initializedAudioPlayers!..")
    document.querySelectorAll('.play-button').forEach(button => {
      // Remove existing listeners to prevent duplicates
      button.removeEventListener('click', handlePlayClick);
      button.addEventListener('click', handlePlayClick);
    });
  }

  function handlePlayClick(e) {
    const target = e.currentTarget as HTMLButtonElement;
    const audioContainer = target.closest('.flex');
    const audio = audioContainer?.querySelector('audio');
    const playIcon = target.querySelector('.play-icon');
    const pauseIcon = target.querySelector('.pause-icon');
    
    if (audio && playIcon && pauseIcon) {
      if (audio.paused) {
        // Stop all other playing audio first
        document.querySelectorAll('audio').forEach(a => {
          if (a !== audio && !a.paused) {
            a.pause();
            // Reset other buttons
            const otherButton = a.closest('.flex')?.querySelector('.play-button');
            if (otherButton) {
              otherButton.querySelector('.play-icon')?.classList.remove('hidden');
              otherButton.querySelector('.pause-icon')?.classList.add('hidden');
            }
          }
        });
        
        // Play current audio
        audio.play().catch(error => {
          console.error('Error playing audio:', error);
        });
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
      } else {
        audio.pause();
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
      }
    }
  }

  // Initialize on first load
  initializeAudioPlayers();
  // Re-initialize on page transitions
  document.addEventListener('astro:page-load', initializeAudioPlayers);
  console.log("Hello, I'm the code for manage the PodcastCart with astro...")
  
  // Cleanup on page transitions
  document.addEventListener('astro:before-swap', () => {
    document.querySelectorAll('audio').forEach(audio => {
      audio.pause();
    });
  });
</script>

<style>
  .audio-preview {
    &::-webkit-media-controls-panel {
      background-color: theme("colors.gray.100");
      @apply dark:bg-gray-700;
    }

    &::-webkit-media-controls-current-time-display,
    &::-webkit-media-controls-time-remaining-display {
      @apply text-gray-700 dark:text-gray-300;
    }
  }
</style>
